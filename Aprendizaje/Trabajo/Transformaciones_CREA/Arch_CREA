import pandas as pd
from datetime import datetime
import re
import csv

# Ruta del archivo Excel (.xlsx) original
ruta_excel = r'/home/sebastian/Downloads/BI_EST_GDE_CTRL.xlsx'

# Ruta del archivo CSV de salida
nuevo_csv = r'/home/sebastian/Downloads/BI_EST_GDE_CTRL1.csv'

# Especificar las columnas que deben ser leídas como cadenas para preservar ceros a la izquierda
columns_as_str = ['ID_CURSO', 'EMPLID_LIDER']

# Leer el archivo Excel y especificar tipos de datos para ciertas columnas
df = pd.read_excel(ruta_excel, dtype={col: str for col in columns_as_str})

def conv_hora_militar(time_str):
    if pd.isna(time_str) or time_str.strip() == '' or time_str.strip().upper() == 'NA':
        return ''
    
    # Reemplazar todas las variaciones de AM y PM a un formato consistente
    replacements = {
        ' a. m.': 'AM', ' p. m.': 'PM', ' A. M.': 'AM', ' P. M.': 'PM',
        ' a.m.': 'AM', ' p.m.': 'PM', 'A.M.': 'AM', 'P.M.': 'PM',
        ' a.m.': 'AM', ' p.m.': 'PM', ' A.M.': 'AM', ' P.M.': 'PM',
        ' a. m.': 'AM', ' p. m.': 'PM', ' A.M.': 'AM', ' P.M.': 'PM',
        ' a. m.': 'AM', ' p. m.': 'PM', ' A. M.': 'AM', ' P. M.': 'PM'
    }
    for old, new in replacements.items():
        time_str = time_str.replace(old, new)
    
    # Eliminar cualquier carácter no imprimible
    time_str = re.sub(r'[^\x00-\x7F]+', '', time_str)
    
    try:
        time_obj = datetime.strptime(time_str.strip(), '%I:%M%p')
        return time_obj.strftime('%H:%M')
    except ValueError:
        return time_str

df['HORA_INICIO'] = df['HORA_INICIO'].apply(conv_hora_militar)
df['HORA_FIN'] = df['HORA_FIN'].apply(conv_hora_militar)

# Guardar el DataFrame modificado en un nuevo archivo CSV con el separador '|'
df.to_csv(nuevo_csv, sep='|', index=False, encoding='utf-8', quoting=csv.QUOTE_NONE)

print(f"Archivo modificado y guardado en: {nuevo_csv}")




# import pandas as pd
# from datetime import datetime
# import csv
# import re

# ruta_csv = r'/home/sebastian/Downloads/BI_EST_GDE_CTRL.csv'
# nuevo_csv = r'/home/sebastian/Downloads/BI_EST_GDE_CTRL1.csv'
# columns_as_str = ['ID_CURSO', 'EMPLID_LIDER']

# df = pd.read_csv(ruta_csv, sep='|', dtype={col: str for col in columns_as_str}, encoding='latin1')

# def conv_hora_militar(time_str):
#     if pd.isna(time_str) or time_str.strip() == '' or time_str.strip().upper() == 'NA':
#         return ''
    
#     # Reemplazar todas las variaciones de AM y PM a un formato consistente
#     replacements = {
#         ' a. m.': 'AM', ' p. m.': 'PM', ' A. M.': 'AM', ' P. M.': 'PM',
#         ' a.m.': 'AM', ' p.m.': 'PM', 'A.M.': 'AM', 'P.M.': 'PM',
#         ' a.m.': 'AM', ' p.m.': 'PM', ' A.M.': 'AM', ' P.M.': 'PM',
#         ' a. m.': 'AM', ' p. m.': 'PM', ' A.M.': 'AM', ' P.M.': 'PM',
#         ' a. m.': 'AM', ' p. m.': 'PM', ' A. M.': 'AM', ' P. M.': 'PM'
#     }
#     for old, new in replacements.items():
#         time_str = time_str.replace(old, new)
    
#     # Eliminar cualquier carácter no imprimible
#     time_str = re.sub(r'[^\x00-\x7F]+', '', time_str)
    
#     try:
#         time_obj = datetime.strptime(time_str.strip(), '%I:%M%p')
#         return time_obj.strftime('%H:%M')
#     except ValueError:
#         return time_str

# df['HORA_INICIO'] = df['HORA_INICIO'].apply(conv_hora_militar)
# df['HORA_FIN'] = df['HORA_FIN'].apply(conv_hora_militar)

# df.to_csv(nuevo_csv, sep='|', index=False, encoding='latin1', quoting=csv.QUOTE_ALL)

# print(f"Archivo modificado y guardado en: {nuevo_csv}")